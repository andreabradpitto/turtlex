<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <!-- Set args - tweakable -->
  <arg name="gui"               default="true"/> <!-- Run the simulation with or without a GUI -->
  <arg name="use_rviz"          default="false"/> <!-- Launch RViz or not -->
  <arg name="debug"             default="false"/> <!-- Debug-related -->
  <arg name="recording"         default="false"/> <!-- Debug-related; previously called "headless" (now deprecated) -->
  <arg name="verbose"           default="false"/> <!-- Debug-related -->

  <!-- Set args - tweaking not recommended -->
  <arg name="robot"             default="turtlex"/>
  <arg name="paused"            default="true"/> <!-- Setting this to False may break the execution: https://github.com/ros-simulation/gazebo_ros_pkgs/issues/93-->
  <arg name="world_name"        value="$(find turtlex_gazebo)/worlds/office.world"/>
  <!--<arg name="world_name"        value="$(find turtlex_gazebo)/worlds/office_complete.world"/>-->

  <arg name="initial_robot_position" doc="Initial robot position of the robot"
        default=" -x 0.0 -y 0.0 -z 0.0 -R 0.0 -P 0.0 -Y 0.0"/>
  <arg name="initial_joint_positions" doc="Initial joint configuration of the robot"
        default=" -J gripper_prismatic_joint_1 0.031 -J gripper_prismatic_joint_2 0.031 -J joint_1 0.0 -J joint_2 -1.0 -J joint_3 1.0 -J joint_4 1.2 -J joint_5 0.0"/>
  <arg name="world_pose" value="-x 0.0 -y 0.0 -z 0.0"/>

  <!-- Start Gazebo with a blank world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="verbose" value="$(arg verbose)"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="recording" value="$(arg recording)"/>
      <arg name="world_name" default="$(arg world_name)"/>
  </include>

  <rosparam command="load" file="$(find turtlex_moveit_config)/config/joint_names.yaml"/>

  <!-- include robot -->
  <arg name="urdf_file" default="$(find xacro)/xacro '$(find turtlex_description)/robots/turtlex_main.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)"/> <!-- Send robot model to the ROS Parameter Server -->

  <!-- Load joint controller parameters for Gazebo -->
  <!--<rosparam file="$(find turtlex_moveit_config)/config/gazebo_controllers.yaml"/>-->
  <!-- Load the controllers -->
  <rosparam file="$(find turtlex_moveit_config)/config/ros_controllers.yaml"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller arm_controller gripper_controller"/>

  <!-- Gazebo model spawner -->
  <arg name="unpause" value="$(eval '-unpause' if arg('paused') else '')"/>
  <!--<arg name="unpause" value=""/>-->
  <node name="spawn_turtlex_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="$(optenv ROBOT_INITIAL_POSE) -urdf -param robot_description $(arg unpause)
              -model $(arg robot) $(arg world_pose) $(arg initial_robot_position) $(arg initial_joint_positions)"/>

  <!--<node name="prepare_robot" pkg="turtlex_moveit_config" type="prepare_simulated_robot.py" />-->

  <!-- Velocity muxer -->
  <node name="mobile_base_nodelet_manager" pkg="nodelet" type="nodelet" args="manager"/>
  
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="/source_list">[/joint_states]</rosparam>
  </node>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"/>

  <!-- Launch MoveIt -->
  <include file="$(find turtlex_moveit_config)/launch/move_group.launch">
      <arg name="publish_monitored_planning_scene" value="true"/>
      <arg name="info" value="true"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="load_robot_description" value="false" />
      <arg name="moveit_controller_manager" value="simple"/> <!-- TODO "simple" / "ros_control" / "andrea" -->
  </include>

  <!-- Run RViz and load the default config -->
  <group if="$(arg use_rviz)">

      <!--<arg name="rviz_config" value="$(find turtlex_gazebo)/config/config.rviz"/>-->
      <arg name="rviz_config" value="$(find turtlex_moveit_config)/launch/moveit.rviz"/>

      <!--<arg name="debug" default="false" />-->
      <arg unless="$(arg debug)" name="launch_prefix" value="" />
      <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

      <!--<arg name="rviz_config" default="" />-->
      <arg     if="$(eval rviz_config=='')" name="command_args" value="" />
      <arg unless="$(eval rviz_config=='')" name="command_args" value="-d $(arg rviz_config)" />

      <node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false"
              args="$(arg command_args)" output="screen">
      </node>
  </group>

  <!--<include file="$(find turtlex_description)/launch/xtion_pro_sensor.launch"/>-->


  <!-- Load the environment parameters file -->
  <rosparam command="load" file="$(find turtlex_gym)/config/turtlex_office_nav_sac.yaml"/>
  <!-- Launch the training system -->
  <node pkg="turtlex_gym" name="turtlex_sac_office" type="alg_nav_sac_office.py" output="screen"/>

</launch>
