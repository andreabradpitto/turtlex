<?xml version="1.0" encoding="utf-8"?>
<launch>
<!--<group ns="turtlex">--> <!-- If this is uncommented, comment the namespace in turltlex_gym/config/*-->

  <!-- Set args -->
  <arg name="paused"            default="false"/>
  <arg name="gui"               default="true"/>
  <arg name="recording"         default="false"/> <!-- previously called "headless" (now deprecated) -->

  <!-- include world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time"    value="true"/>
    <arg name="debug"           value="false"/>
    <arg name="verbose"         value="true"/>
    <arg name="recording"       value="$(arg recording)"/>
    <arg name="gui"             value="$(arg gui)"/>
    <arg name="paused"          value="$(arg paused)"/>
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/maze_loop_brick.world"/>-->
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/empty_wall.world"/>-->
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/small_office.world"/>-->
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/prova.sdf"/>-->
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/office_vuoto.sdf"/>-->
    <!--<arg name="world_name"      value="$(find turtlex_gazebo)/worlds/my_office.world"/>-->
  </include>



  <arg name="tb3"       value="0"/> <!-- Spawn tb3 -->
  <arg name="turtlex"   value="1"/> <!-- Spawn Turtlex -->



<group if="$(eval arg('tb3') == 1)">
  <!--<include file="$(find turtlebot_gazebo)/launch/includes/kobuki.launch.xml">
    <arg name="base" value="kobuki"/>
    <arg name="stacks" value="hexagons"/>
    <arg name="3d_sensor" value="kinect"/>
  </include>-->

  <!--<arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>-->
  <arg name="model"   default="burger"/>
  <arg name="x_pos"   default="0.0"/>
  <!--<arg name="x_pos"   default="1.0"/>-->
  <arg name="y_pos"   default="0.0"/>
  <arg name="z_pos"   default="0.0"/>
  <arg name="roll"    value="0.0"/>
  <arg name="pitch"   value="0.0"/>
  <arg name="yaw"     value="0.0"/>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model turtlebot3_burger -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" />

  <!-- Launch RViz -->
  <node name="rviz" pkg="rviz" type="rviz"/>

</group>

<group if="$(eval arg('turtlex') == 1)">

  <!--<arg name="x"                 value="1.0"/>-->
  <arg name="x"                 value="0.0"/>
  <arg name="y"                 value="0.0"/>
  <arg name="z"                 value="0.0"/>
  <arg name="roll"              value="0.0"/>
  <arg name="pitch"             value="0.0"/>
  <arg name="yaw"               value="0.0"/>
  <arg name="joint_1"           value="0.0"/>
  <arg name="joint_2"           value="-1.0"/>
  <arg name="joint_3"           value="1.0"/>
  <arg name="joint_4"           value="1.2"/>
  <arg name="joint_5"           value="0.0"/>
  <arg name="gripper_joint_1"   value="0.003"/>
  <arg name="gripper_joint_2"   value="0.003"/>

  <!-- include robot -->
  <arg name="urdf_file" default="$(find xacro)/xacro '$(find turtlex_description)/robots/turtlex_main.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find turtlex_description)/config/widowx.yaml" command="load"/>
  <!-- load the controllers -->           <!-- QUI HO TOLTO ns="/turtlex" -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="joint_1_position_controller joint_2_position_controller joint_3_position_controller
                              joint_4_position_controller joint_5_position_controller
                              gripper_prismatic_joint_1_position_controller gripper_prismatic_joint_2_position_controller joint_state_controller"/>
  <!-- convert joint states to TF transforms for rviz, etc -->
  <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/turtlex/joint_states" />-->

  <!-- Gazebo model spawner -->           <!-- QUI HO TOLTO -unpause negli args, davanti a -urdf -->
  <node name="spawn_turtlex_model" pkg="gazebo_ros" type="spawn_model"
        args="$(optenv ROBOT_INITIAL_POSE) -urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)
              -J joint_1 $(arg joint_1) -J joint_2 $(arg joint_2) -J joint_3 $(arg joint_3)
              -J joint_4 $(arg joint_4) -J joint_5 $(arg joint_5) -J gripper_prismatic_joint_1 $(arg gripper_joint_1)
              -J gripper_prismatic_joint_2 $(arg gripper_joint_2) -param robot_description -model mobile_base"/>

  <!-- Launch RViz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlex_gazebo)/config/config.rviz"/>

  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/> <!-- Serve ? -->
  <!-- <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node> -->

</group>

  <!-- Fake laser -->
  <!--<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>-->
  
  <!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>--> <!-- Se lancio la sim in Gazebo questo va in conflitto su /joint_states -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0"/> <!-- prova anche value="5.0" -->
  </node>

  <!-- AGGIUNTO PER RGBD CAMERA, MA MI SA CHE E PER ROBOT VERO -->
  <!--<include file="$(find turtlex_description)/launch/xtion_pro_sensor.launch"/>-->

  <!-- This version uses the openai_ros environments -->
  <!--<rosparam command="load" file="$(find turtlex_gym)/config/turtlex_openai_qlearn_params.yaml"/>--> <!-- ok for maze and the one with "start_qlearning.py" -->
  <!--<rosparam command="load" file="$(find turtlex_gym)/config/turtlex_openai_qlearn_params_wall.yaml"/>--> <!-- wall case -->
  <!--<rosparam command="load" file="$(find turtlex_gym)/config/turtlex_openai_sac_params_office.yaml"/>--> <!-- SAC office case -->
  <!-- Launch the training system -->
  <!--<node pkg="turtlex_gym" name="turtlex_maze" type="start_qlearning.py" output="screen"/>--> <!--This is not really optimized for the maze -->
  <!--<node pkg="turtlex_gym" name="example_turtlex_maze_qlearn" type="my_start_qlearning_maze.py" output="screen"/>--> <!-- versione usata anche in main.launch di gym_construct -->
  <!--<node pkg="turtlex_gym" name="example_turtlex_wall_qlearn" type="my_start_qlearning_wall.py" output="screen"/>--> <!-- wall case -->
  <!--<node pkg="turtlex_gym" name="turtlex_sac_office" type="my_sac_office.py" output="screen"/>--> <!-- SAC office case -->

<!--</group>-->
</launch>
