<?xml version="1.0" encoding="UTF-8"?>
<launch>

<!-- Gazebo specific options -->
<arg name="gui" default="true"/>
<arg name="paused" default="true"/>
<arg name="robot" default="turtlex"/>
<arg name="recording" default="false"/> <!-- previously called "headless" (now deprecated) -->
<arg name="verbose" default="true"/>
<!--<arg name="world_name" default="$(find turtlex_gazebo)/worlds/office_vuoto.sdf"/>-->


<!-- By default, we are not in debug mode -->
<arg name="debug" default="false" />

<arg name="use_rviz" default="true" />
<arg name="rviz_config" value="$(dirname)/moveit.rviz"/>



<rosparam command="load" file="$(find turtlex_moveit_config)/config/joint_names.yaml"/>

<!-- launch the gazebo simulator and spawn the robot -->
<!--<include file="$(dirname)/gazebo.launch" >
  <arg name="paused" value="$(arg paused)"/>
  <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
</include>-->

<!-- launch the gazebo simulator and spawn the robot -->
  <arg name="initial_joint_positions" doc="Initial joint configuration of the robot"
       default=" -J gripper_prismatic_joint_1 0.0104 -J gripper_prismatic_joint_2 0.0104 -J joint_1 0 -J joint_2 -1 -J joint_3 1 -J joint_4 1.2 -J joint_5 0"/>

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="recording" value="$(arg recording)"/>
  </include>

  <!-- send robot urdf to param server -->
  <param name="robot_description" command="xacro  '$(find turtlex_description)/robots/turtlex_main.urdf.xacro'" />

  <!-- unpause only after loading robot model -->
  <!--<arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />--> <!-- poi sotto ci vuole $(arg unpause) al posto di -unpause -->
  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
  <arg name="world_pose" value="-x 0 -y 0 -z 0" />
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -param robot_description -model robot $(arg world_pose) $(arg initial_joint_positions)"/>
        <!--args="-urdf -param robot_description -model robot -unpause $(arg world_pose) $(arg initial_joint_positions)"/>-->

  <!-- Load joint controller parameters for Gazebo -->
  <rosparam file="$(find turtlex_moveit_config)/config/gazebo_controllers.yaml" />
  <!-- Spawn Gazebo ROS controllers -->
  <node name="gazebo_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller" />
  <!-- Load ROS controllers -->
  <!--<include file="$(dirname)/ros_controllers.launch"/>-->

    <!-- Load ROS controllers -->
        <!-- Load joint controller configurations from YAML file to parameter server -->
        <rosparam file="$(find turtlex_moveit_config)/config/ros_controllers.yaml" command="load"/>

        <!-- Load the controllers -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" args="arm_controller gripper_controller "/>



<!--<include file="$(find turtlex_moveit_config)/launch/planning_context.launch">
  <arg name="load_robot_description" value="true"/>
</include>-->

<!-- If needed, broadcast static tf for robot root -->
<node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 odom base_footprint" />

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
  <param name="/use_gui" value="false"/>
  <rosparam param="/source_list">[/joint_states]</rosparam>
</node>

<!-- Given the published joint states, publish tf for the robot links -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

<include file="$(find turtlex_moveit_config)/launch/move_group.launch">
  <arg name="publish_monitored_planning_scene" value="true"/>
  <arg name="info" value="true"/>
  <arg name="debug" value="$(arg debug)"/>
  <arg name="load_robot_description" value="true" /> <!-- TODO da provare anche "false" -->
  <arg name="moveit_controller_manager" value="simple" /> <!-- TODO da provare anche "ros_control" -->
</include>

<!-- Run Rviz and load the default config to see the state of the move_group node -->
<!--<include file="$(find turtlex_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">-->
<!--<include file="$(dirname)/moveit_rviz.launch" if="$(arg use_rviz)">
  <arg name="rviz_config" value="$(dirname)/moveit.rviz"/>
  <arg name="debug" value="$(arg debug)"/>
</include>-->

<!-- Run RViz and load the default config to see the state of the move_group node -->
<group if="$(arg use_rviz)">
  <!--<arg name="debug" default="false" />-->
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!--<arg name="rviz_config" default="" />-->
  <arg     if="$(eval rviz_config=='')" name="command_args" value="" />
  <arg unless="$(eval rviz_config=='')" name="command_args" value="-d $(arg rviz_config)" />

  <node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false"
        args="$(arg command_args)" output="screen">
  </node>
</group>

</launch>
